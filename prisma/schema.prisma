generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  Password?
  sessions  Session[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Expense {
  id          Int             @id @default(autoincrement())
  categoryId  Int
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  amount      Float
  date        DateTime        @default(now()) // Start of the week for this expense
  description String
  createdAt   DateTime        @default(now())
}

model ExpenseCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique // e.g., "suppliers", "rent", "salaries"
  expenses Expense[]
}

model Sale {
  id        Int       @id @default(autoincrement())
  type      String // e.g., "cash", "card", "transfer", "current account"
  amount    Float
  date      DateTime?
  clientId  Int? // Optional; null for regular sales
  client    Client?   @relation(fields: [clientId], references: [id])
  createdAt DateTime  @default(now())
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String // Client name
  discount  Float // Discount percentage, e.g., 0.1 for 10%
  sales     Sale[]
  createdAt DateTime @default(now())
}

model Stock {
  id        Int       @id @default(autoincrement())
  typeId    Int
  type      StockType @relation(fields: [typeId], references: [id])
  quantity  Float
  costValue Float
  createdAt DateTime  @default(now())
}

model StockType {
  id     Int     @id @default(autoincrement())
  name   String  @unique // e.g., "beef", "pork", "chicken"
  stocks Stock[]
}
